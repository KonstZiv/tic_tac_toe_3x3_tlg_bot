# Generated by Django 5.2.1 on 2025-06-13 11:18

import django.db.models.deletion
import tictactoe.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("tictactoe", "0003_alter_tictactoeproposition_accepted_at_and_more"),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name="tictactoeproposition",
            name="unique_pending_proposition",
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="accepted_at",
            field=models.DateTimeField(
                blank=True,
                help_text="Time of acceptance of the offer (null, if not yet accepted). Setting the status accepted is possible only for a fully completed offer and with the accepted_at field set (the time will be adjusted at the time of setting).",
                null=True,
                verbose_name="accepted at",
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True,
                help_text="Date the offer was created. Set automatically.",
                verbose_name="created at",
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="expires_at",
            field=models.DateTimeField(
                default=tictactoe.models.get_data_expired,
                help_text="Offer expiration date (default will be set to +7 days from current time).",
                verbose_name="expires at",
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="is_active",
            field=models.BooleanField(
                default=True,
                help_text="Indicates whether the proposal is active. Changes to False during a DELETE request.",
                verbose_name="is active",
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="player1_content_type",
            field=models.ForeignKey(
                help_text="ContentType of the object for player 1, required (e.g. TgUser or User).",
                limit_choices_to=models.Q(
                    models.Q(("app_label", "user_management"), ("model", "user")),
                    models.Q(("app_label", "user_management"), ("model", "tguser")),
                    _connector="OR",
                ),
                on_delete=django.db.models.deletion.CASCADE,
                related_name="player1_propositions",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="player1_first",
            field=models.BooleanField(
                blank=True,
                default=None,
                help_text="Indicates whether player 1 goes first. True - player 1, False - player 2, None - not defined.",
                null=True,
                verbose_name="player1 goes first",
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="player1_object_id",
            field=models.PositiveBigIntegerField(
                help_text="Player 1's object ID, required (e.g. TgUser.id or User.id)."
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="player1_sign",
            field=models.CharField(
                blank=True,
                choices=[("❌", "Cross"), ("⭕", "Nought")],
                default=None,
                help_text="Player 1's sign, possible: ['❌', '⭕']. Cannot be the same for different players. When creating an offer, can be verbal, must be set before accepting the game.",
                max_length=1,
                null=True,
                verbose_name="player1 sign",
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="player2_content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="ContentType of the object for player 2, optional (e.g. TgUser or User).",
                limit_choices_to=models.Q(
                    models.Q(("app_label", "user_management"), ("model", "user")),
                    models.Q(("app_label", "user_management"), ("model", "tguser")),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="player2_propositions",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="player2_object_id",
            field=models.PositiveBigIntegerField(
                blank=True,
                help_text="Player 1's object ID, optional (e.g. TgUser.id or User.id).",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="player2_sign",
            field=models.CharField(
                blank=True,
                choices=[("❌", "Cross"), ("⭕", "Nought")],
                default=None,
                help_text="Player 2's sign, possible: ['❌', '⭕']. Cannot be the same for different players. When creating an offer, can be verbal, must be set before accepting the game.",
                max_length=1,
                null=True,
                verbose_name="player2 sign",
            ),
        ),
        migrations.AlterField(
            model_name="tictactoeproposition",
            name="status",
            field=models.CharField(
                choices=[
                    ("pending", "Pending"),
                    ("accepted", "Accepted"),
                    ("declined", "Declined"),
                    ("incomplete", "Incomplete"),
                ],
                default="pending",
                help_text="Offer status: ['pending', 'accepted', 'declined', 'incomplete'].",
                max_length=20,
                verbose_name="statuses",
            ),
        ),
        migrations.AddConstraint(
            model_name="tictactoeproposition",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    models.Q(
                        ("status", "incomplete"), ("status", "pending"), _connector="OR"
                    ),
                    ("player2_object_id__isnull", False),
                ),
                fields=(
                    "player1_content_type",
                    "player1_object_id",
                    "player2_content_type",
                    "player2_object_id",
                ),
                name="unique_pending_incomplete_proposition",
            ),
        ),
    ]
